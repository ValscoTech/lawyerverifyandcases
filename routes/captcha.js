const express = require("express");
const axios = require("axios");

const router = express.Router();

// --- ScraperAPI Configuration ---
// Get your ScraperAPI key from environment variables
const scraperApiKey = process.env.SCRAPERAPI_KEY;
const scraperApiEndpoint = 'http://api.scraperapi.com/'; // ScraperAPI's base URL

// Check if ScraperAPI key is provided
if (!scraperApiKey) {
    console.warn('WARNING: SCRAPERAPI_KEY environment variable is not set. ScraperAPI will not be used for fetchCaptcha.');
    // In a production environment, you might want to handle this more strictly,
    // e.g., throw an error or prevent the service from starting.
}

router.post("/fetchCaptcha", async (req, res) => {
    try {
        const { selectedBench } = req.body;
        if (!selectedBench) {
            return res.status(400).json({ error: "No bench selected" });
        }

        req.session.selectedBench = selectedBench;

        // --- ScraperAPI Integration Logic ---
        const targetCaptchaUrl = "https://hcservices.ecourts.gov.in/hcservices/securimage/securimage_show.php";

        // Parameters for ScraperAPI itself
        const scraperApiParams = {
            api_key: scraperApiKey,
            url: targetCaptchaUrl,
            // For images, 'render': 'true' is usually not needed unless the image URL
            // itself is dynamically generated by complex JavaScript, which is rare for captchas.
            // You might consider 'country_code': 'in' if IP location is important.
        };

        // Headers to be forwarded by ScraperAPI to the target captcha URL
        // These mimic a browser request to the captcha image.
        const headersToForward = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Referer': 'https://hcservices.ecourts.gov.in/', // Important: refers back to the main eCourts page
        };

        // Configuration for the Axios request *to ScraperAPI*
        const axiosConfigToScraperAPI = {
            params: scraperApiParams,        // ScraperAPI specific query parameters
            headers: headersToForward,      // Headers to be forwarded to the target URL
            responseType: "arraybuffer",    // Keep this for handling image data
            timeout: 45000,                 // Timeout for the request to ScraperAPI
        };

        let captchaResponse;

        if (scraperApiKey) {
            console.log('Fetching captcha via ScraperAPI...');
            captchaResponse = await axios.get(
                scraperApiEndpoint,
                axiosConfigToScraperAPI
            );
        } else {
            console.log('Fetching captcha directly (ScraperAPI key not set)...');
            // Fallback to direct request if ScraperAPI key is not set
            captchaResponse = await axios.get(
                targetCaptchaUrl,
                { responseType: "arraybuffer", headers: headersToForward, timeout: 45000 }
            );
        }
        // --- End ScraperAPI Integration Logic ---

        const base64Image = Buffer.from(captchaResponse.data, "binary").toString("base64");
        const contentType = captchaResponse.headers["content-type"] || "image/png";

        // Capture Cookies - ScraperAPI will return the headers from the target URL.
        // We still need to parse 'set-cookie' from ScraperAPI's response headers.
        const setCookie = captchaResponse.headers["set-cookie"] || [];
        const combinedCookies = setCookie.map((c) => c.split(";")[0]).join("; ");

        if (!combinedCookies) {
            console.warn("⚠️ No cookies received from captcha response via ScraperAPI.");
            // Consider if this should be a client-side error or continue without cookies
            // depending on what happens next if cookies are truly optional for later steps.
            return res.status(500).json({ error: "Failed to fetch captcha cookies." });
        }

        // Store cookies in session
        req.session.captchaCookies = combinedCookies;
        req.session.save((err) => {
            if (err) {
                console.error("⚠️ Error saving session:", err);
                return res.status(500).json({ error: "Session save failed" });
            }

            console.log("✅ Captcha Cookies Stored:", req.session.captchaCookies);

            res.json({
                sessionID: req.sessionID,
                captchaImage: `data:${contentType};base64,${base64Image}`,
            });
        });
    } catch (error) {
        console.error("Captcha fetch error:", error.message);
        // More detailed error logging for debugging
        if (process.env.NODE_ENV !== 'production' && error.response) {
            console.error('Error Response Status:', error.response.status);
            console.error('Error Response Data Preview:', String(error.response.data).substring(0, 200) + '...');
            console.error('Error Response Headers:', error.response.headers);
        }
        res.status(500).json({ error: "Failed to fetch captcha", details: error.message });
    }
});

module.exports = router;